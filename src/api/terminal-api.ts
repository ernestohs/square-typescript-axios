/* tslint:disable */
/* eslint-disable */
/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CancelTerminalCheckoutResponse } from '../models';
// @ts-ignore
import { CancelTerminalRefundResponse } from '../models';
// @ts-ignore
import { CreateTerminalCheckoutRequest } from '../models';
// @ts-ignore
import { CreateTerminalCheckoutResponse } from '../models';
// @ts-ignore
import { CreateTerminalRefundRequest } from '../models';
// @ts-ignore
import { CreateTerminalRefundResponse } from '../models';
// @ts-ignore
import { GetTerminalCheckoutResponse } from '../models';
// @ts-ignore
import { GetTerminalRefundResponse } from '../models';
// @ts-ignore
import { SearchTerminalCheckoutsRequest } from '../models';
// @ts-ignore
import { SearchTerminalCheckoutsResponse } from '../models';
// @ts-ignore
import { SearchTerminalRefundsRequest } from '../models';
// @ts-ignore
import { SearchTerminalRefundsResponse } from '../models';
/**
 * TerminalApi - axios parameter creator
 * @export
 */
export const TerminalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Cancels a Terminal checkout request if the status of the request permits it.
         * @summary CancelTerminalCheckout
         * @param {string} checkoutId Unique ID for the desired &#x60;TerminalCheckout&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelTerminalCheckout: async (checkoutId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'checkoutId' is not null or undefined
            if (checkoutId === null || checkoutId === undefined) {
                throw new RequiredError('checkoutId','Required parameter checkoutId was null or undefined when calling cancelTerminalCheckout.');
            }
            const localVarPath = `/v2/terminals/checkouts/{checkout_id}/cancel`
                .replace(`{${"checkout_id"}}`, encodeURIComponent(String(checkoutId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://connect.squareupsandbox.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", ["PAYMENTS_WRITE"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = `Bearer ${localVarAccessTokenValue}`;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: `${localVarUrlObj.pathname}${localVarUrlObj.search}${localVarUrlObj.hash}`,
                options: localVarRequestOptions,
            };
        },
        /**
         * Cancels an Interac terminal refund request by refund request ID if the status of the request permits it.
         * @summary CancelTerminalRefund
         * @param {string} terminalRefundId Unique ID for the desired &#x60;TerminalRefund&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelTerminalRefund: async (terminalRefundId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'terminalRefundId' is not null or undefined
            if (terminalRefundId === null || terminalRefundId === undefined) {
                throw new RequiredError('terminalRefundId','Required parameter terminalRefundId was null or undefined when calling cancelTerminalRefund.');
            }
            const localVarPath = `/v2/terminals/refunds/{terminal_refund_id}/cancel`
                .replace(`{${"terminal_refund_id"}}`, encodeURIComponent(String(terminalRefundId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://connect.squareupsandbox.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", ["PAYMENTS_WRITE"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = `Bearer ${localVarAccessTokenValue}`;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: `${localVarUrlObj.pathname}${localVarUrlObj.search}${localVarUrlObj.hash}`,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new Terminal checkout request and sends it to the specified device to take a payment for the requested amount.
         * @summary CreateTerminalCheckout
         * @param {CreateTerminalCheckoutRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTerminalCheckout: async (body: CreateTerminalCheckoutRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createTerminalCheckout.');
            }
            const localVarPath = `/v2/terminals/checkouts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://connect.squareupsandbox.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", ["PAYMENTS_WRITE"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = `Bearer ${localVarAccessTokenValue}`;
            }
    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") && configuration.isJsonMime(localVarRequestOptions.headers['Content-Type']);
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: `${localVarUrlObj.pathname}${localVarUrlObj.search}${localVarUrlObj.hash}`,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a request to refund an Interac payment completed on a Square Terminal.
         * @summary CreateTerminalRefund
         * @param {CreateTerminalRefundRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTerminalRefund: async (body: CreateTerminalRefundRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createTerminalRefund.');
            }
            const localVarPath = `/v2/terminals/refunds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://connect.squareupsandbox.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", ["PAYMENTS_WRITE"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = `Bearer ${localVarAccessTokenValue}`;
            }
    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") && configuration.isJsonMime(localVarRequestOptions.headers['Content-Type']);
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: `${localVarUrlObj.pathname}${localVarUrlObj.search}${localVarUrlObj.hash}`,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Terminal checkout request by checkout_id.
         * @summary GetTerminalCheckout
         * @param {string} checkoutId Unique ID for the desired &#x60;TerminalCheckout&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTerminalCheckout: async (checkoutId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'checkoutId' is not null or undefined
            if (checkoutId === null || checkoutId === undefined) {
                throw new RequiredError('checkoutId','Required parameter checkoutId was null or undefined when calling getTerminalCheckout.');
            }
            const localVarPath = `/v2/terminals/checkouts/{checkout_id}`
                .replace(`{${"checkout_id"}}`, encodeURIComponent(String(checkoutId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://connect.squareupsandbox.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", ["PAYMENTS_READ"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = `Bearer ${localVarAccessTokenValue}`;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: `${localVarUrlObj.pathname}${localVarUrlObj.search}${localVarUrlObj.hash}`,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves an Interac terminal refund object by ID.
         * @summary GetTerminalRefund
         * @param {string} terminalRefundId Unique ID for the desired &#x60;TerminalRefund&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTerminalRefund: async (terminalRefundId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'terminalRefundId' is not null or undefined
            if (terminalRefundId === null || terminalRefundId === undefined) {
                throw new RequiredError('terminalRefundId','Required parameter terminalRefundId was null or undefined when calling getTerminalRefund.');
            }
            const localVarPath = `/v2/terminals/refunds/{terminal_refund_id}`
                .replace(`{${"terminal_refund_id"}}`, encodeURIComponent(String(terminalRefundId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://connect.squareupsandbox.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", ["PAYMENTS_READ"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a filtered list of Terminal checkout requests created by the account making the request.
         * @summary SearchTerminalCheckouts
         * @param {SearchTerminalCheckoutsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTerminalCheckouts: async (body: SearchTerminalCheckoutsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling searchTerminalCheckouts.');
            }
            const localVarPath = `/v2/terminals/checkouts/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://connect.squareupsandbox.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", ["PAYMENTS_READ"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") && configuration.isJsonMime(localVarRequestOptions.headers['Content-Type']);
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a filtered list of Terminal Interac refund requests created by the seller making the request.
         * @summary SearchTerminalRefunds
         * @param {SearchTerminalRefundsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTerminalRefunds: async (body: SearchTerminalRefundsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling searchTerminalRefunds.');
            }
            const localVarPath = `/v2/terminals/refunds/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://connect.squareupsandbox.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", ["PAYMENTS_READ"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") && configuration.isJsonMime(localVarRequestOptions.headers['Content-Type']);
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TerminalApi - functional programming interface
 * @export
 */
export const TerminalApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Cancels a Terminal checkout request if the status of the request permits it.
         * @summary CancelTerminalCheckout
         * @param {string} checkoutId Unique ID for the desired &#x60;TerminalCheckout&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelTerminalCheckout(checkoutId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancelTerminalCheckoutResponse>> {
            const localVarAxiosArgs = await TerminalApiAxiosParamCreator(configuration).cancelTerminalCheckout(checkoutId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Cancels an Interac terminal refund request by refund request ID if the status of the request permits it.
         * @summary CancelTerminalRefund
         * @param {string} terminalRefundId Unique ID for the desired &#x60;TerminalRefund&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelTerminalRefund(terminalRefundId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancelTerminalRefundResponse>> {
            const localVarAxiosArgs = await TerminalApiAxiosParamCreator(configuration).cancelTerminalRefund(terminalRefundId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a new Terminal checkout request and sends it to the specified device to take a payment for the requested amount.
         * @summary CreateTerminalCheckout
         * @param {CreateTerminalCheckoutRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTerminalCheckout(body: CreateTerminalCheckoutRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateTerminalCheckoutResponse>> {
            const localVarAxiosArgs = await TerminalApiAxiosParamCreator(configuration).createTerminalCheckout(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a request to refund an Interac payment completed on a Square Terminal.
         * @summary CreateTerminalRefund
         * @param {CreateTerminalRefundRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTerminalRefund(body: CreateTerminalRefundRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateTerminalRefundResponse>> {
            const localVarAxiosArgs = await TerminalApiAxiosParamCreator(configuration).createTerminalRefund(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a Terminal checkout request by checkout_id.
         * @summary GetTerminalCheckout
         * @param {string} checkoutId Unique ID for the desired &#x60;TerminalCheckout&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTerminalCheckout(checkoutId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTerminalCheckoutResponse>> {
            const localVarAxiosArgs = await TerminalApiAxiosParamCreator(configuration).getTerminalCheckout(checkoutId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves an Interac terminal refund object by ID.
         * @summary GetTerminalRefund
         * @param {string} terminalRefundId Unique ID for the desired &#x60;TerminalRefund&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTerminalRefund(terminalRefundId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTerminalRefundResponse>> {
            const localVarAxiosArgs = await TerminalApiAxiosParamCreator(configuration).getTerminalRefund(terminalRefundId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a filtered list of Terminal checkout requests created by the account making the request.
         * @summary SearchTerminalCheckouts
         * @param {SearchTerminalCheckoutsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchTerminalCheckouts(body: SearchTerminalCheckoutsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchTerminalCheckoutsResponse>> {
            const localVarAxiosArgs = await TerminalApiAxiosParamCreator(configuration).searchTerminalCheckouts(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a filtered list of Terminal Interac refund requests created by the seller making the request.
         * @summary SearchTerminalRefunds
         * @param {SearchTerminalRefundsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchTerminalRefunds(body: SearchTerminalRefundsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchTerminalRefundsResponse>> {
            const localVarAxiosArgs = await TerminalApiAxiosParamCreator(configuration).searchTerminalRefunds(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TerminalApi - factory interface
 * @export
 */
export const TerminalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Cancels a Terminal checkout request if the status of the request permits it.
         * @summary CancelTerminalCheckout
         * @param {string} checkoutId Unique ID for the desired &#x60;TerminalCheckout&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelTerminalCheckout(checkoutId: string, options?: any): AxiosPromise<CancelTerminalCheckoutResponse> {
            return TerminalApiFp(configuration).cancelTerminalCheckout(checkoutId, options).then((request) => request(axios, basePath));
        },
        /**
         * Cancels an Interac terminal refund request by refund request ID if the status of the request permits it.
         * @summary CancelTerminalRefund
         * @param {string} terminalRefundId Unique ID for the desired &#x60;TerminalRefund&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelTerminalRefund(terminalRefundId: string, options?: any): AxiosPromise<CancelTerminalRefundResponse> {
            return TerminalApiFp(configuration).cancelTerminalRefund(terminalRefundId, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new Terminal checkout request and sends it to the specified device to take a payment for the requested amount.
         * @summary CreateTerminalCheckout
         * @param {CreateTerminalCheckoutRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTerminalCheckout(body: CreateTerminalCheckoutRequest, options?: any): AxiosPromise<CreateTerminalCheckoutResponse> {
            return TerminalApiFp(configuration).createTerminalCheckout(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a request to refund an Interac payment completed on a Square Terminal.
         * @summary CreateTerminalRefund
         * @param {CreateTerminalRefundRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTerminalRefund(body: CreateTerminalRefundRequest, options?: any): AxiosPromise<CreateTerminalRefundResponse> {
            return TerminalApiFp(configuration).createTerminalRefund(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Terminal checkout request by checkout_id.
         * @summary GetTerminalCheckout
         * @param {string} checkoutId Unique ID for the desired &#x60;TerminalCheckout&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTerminalCheckout(checkoutId: string, options?: any): AxiosPromise<GetTerminalCheckoutResponse> {
            return TerminalApiFp(configuration).getTerminalCheckout(checkoutId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves an Interac terminal refund object by ID.
         * @summary GetTerminalRefund
         * @param {string} terminalRefundId Unique ID for the desired &#x60;TerminalRefund&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTerminalRefund(terminalRefundId: string, options?: any): AxiosPromise<GetTerminalRefundResponse> {
            return TerminalApiFp(configuration).getTerminalRefund(terminalRefundId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a filtered list of Terminal checkout requests created by the account making the request.
         * @summary SearchTerminalCheckouts
         * @param {SearchTerminalCheckoutsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTerminalCheckouts(body: SearchTerminalCheckoutsRequest, options?: any): AxiosPromise<SearchTerminalCheckoutsResponse> {
            return TerminalApiFp(configuration).searchTerminalCheckouts(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a filtered list of Terminal Interac refund requests created by the seller making the request.
         * @summary SearchTerminalRefunds
         * @param {SearchTerminalRefundsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTerminalRefunds(body: SearchTerminalRefundsRequest, options?: any): AxiosPromise<SearchTerminalRefundsResponse> {
            return TerminalApiFp(configuration).searchTerminalRefunds(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TerminalApi - object-oriented interface
 * @export
 * @class TerminalApi
 * @extends {BaseAPI}
 */
export class TerminalApi extends BaseAPI {
    /**
     * Cancels a Terminal checkout request if the status of the request permits it.
     * @summary CancelTerminalCheckout
     * @param {string} checkoutId Unique ID for the desired &#x60;TerminalCheckout&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TerminalApi
     */
    public cancelTerminalCheckout(checkoutId: string, options?: any) {
        return TerminalApiFp(this.configuration).cancelTerminalCheckout(checkoutId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cancels an Interac terminal refund request by refund request ID if the status of the request permits it.
     * @summary CancelTerminalRefund
     * @param {string} terminalRefundId Unique ID for the desired &#x60;TerminalRefund&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TerminalApi
     */
    public cancelTerminalRefund(terminalRefundId: string, options?: any) {
        return TerminalApiFp(this.configuration).cancelTerminalRefund(terminalRefundId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new Terminal checkout request and sends it to the specified device to take a payment for the requested amount.
     * @summary CreateTerminalCheckout
     * @param {CreateTerminalCheckoutRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TerminalApi
     */
    public createTerminalCheckout(body: CreateTerminalCheckoutRequest, options?: any) {
        return TerminalApiFp(this.configuration).createTerminalCheckout(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a request to refund an Interac payment completed on a Square Terminal.
     * @summary CreateTerminalRefund
     * @param {CreateTerminalRefundRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TerminalApi
     */
    public createTerminalRefund(body: CreateTerminalRefundRequest, options?: any) {
        return TerminalApiFp(this.configuration).createTerminalRefund(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Terminal checkout request by checkout_id.
     * @summary GetTerminalCheckout
     * @param {string} checkoutId Unique ID for the desired &#x60;TerminalCheckout&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TerminalApi
     */
    public getTerminalCheckout(checkoutId: string, options?: any) {
        return TerminalApiFp(this.configuration).getTerminalCheckout(checkoutId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves an Interac terminal refund object by ID.
     * @summary GetTerminalRefund
     * @param {string} terminalRefundId Unique ID for the desired &#x60;TerminalRefund&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TerminalApi
     */
    public getTerminalRefund(terminalRefundId: string, options?: any) {
        return TerminalApiFp(this.configuration).getTerminalRefund(terminalRefundId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a filtered list of Terminal checkout requests created by the account making the request.
     * @summary SearchTerminalCheckouts
     * @param {SearchTerminalCheckoutsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TerminalApi
     */
    public searchTerminalCheckouts(body: SearchTerminalCheckoutsRequest, options?: any) {
        return TerminalApiFp(this.configuration).searchTerminalCheckouts(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a filtered list of Terminal Interac refund requests created by the seller making the request.
     * @summary SearchTerminalRefunds
     * @param {SearchTerminalRefundsRequest} body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TerminalApi
     */
    public searchTerminalRefunds(body: SearchTerminalRefundsRequest, options?: any) {
        return TerminalApiFp(this.configuration).searchTerminalRefunds(body, options).then((request) => request(this.axios, this.basePath));
    }
}
